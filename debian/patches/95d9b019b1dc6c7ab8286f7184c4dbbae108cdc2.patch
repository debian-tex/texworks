From 95d9b019b1dc6c7ab8286f7184c4dbbae108cdc2 Mon Sep 17 00:00:00 2001
From: =?UTF-8?q?Stefan=20L=C3=B6ffler?= <st.loeffler@gmail.com>
Date: Tue, 21 Feb 2023 23:19:59 +0100
Subject: [PATCH] Fix Qt6 warnings

---
 src/CompletingEdit.cpp    | 52 +++++++++++++++++++--------------------
 src/CompletingEdit.h      |  7 +++---
 src/FindDialog.cpp        |  2 +-
 src/PDFDocumentWindow.cpp | 19 +++++++-------
 src/PDFDocumentWindow.h   | 12 +++++----
 src/PrefsDialog.cpp       | 17 +++++++------
 src/TWSynchronizer.cpp    | 11 ++++++---
 src/TWSynchronizer.h      |  2 +-
 src/TeXDocumentWindow.cpp | 42 +++++++++++++++++--------------
 src/TeXHighlighter.cpp    |  5 ++--
 10 files changed, 93 insertions(+), 76 deletions(-)

diff --git a/src/CompletingEdit.cpp b/src/CompletingEdit.cpp
index 0d2cad27..5266f7b9 100644
--- a/src/CompletingEdit.cpp
+++ b/src/CompletingEdit.cpp
@@ -113,8 +113,8 @@ void CompletingEdit::prefixLines(const QString &prefix)
 {
 	QTextCursor cursor = textCursor();
 	cursor.beginEditBlock();
-	int selStart = cursor.selectionStart();
-	int selEnd = cursor.selectionEnd();
+	pos_type selStart = cursor.selectionStart();
+	pos_type selEnd = cursor.selectionEnd();
 	cursor.setPosition(selStart);
 	if (!cursor.atBlockStart()) {
 		cursor.movePosition(QTextCursor::StartOfBlock);
@@ -136,7 +136,7 @@ void CompletingEdit::prefixLines(const QString &prefix)
 	handle_end_of_doc:
 		cursor.insertText(prefix);
 		cursor.movePosition(QTextCursor::StartOfBlock);
-		selEnd += prefix.length();
+		selEnd += static_cast<pos_type>(prefix.length());
 	}
 	cursor.setPosition(selStart);
 	cursor.setPosition(selEnd, QTextCursor::KeepAnchor);
@@ -148,8 +148,8 @@ void CompletingEdit::unPrefixLines(const QString &prefix)
 {
 	QTextCursor cursor = textCursor();
 	cursor.beginEditBlock();
-	int selStart = cursor.selectionStart();
-	int selEnd = cursor.selectionEnd();
+	pos_type selStart = cursor.selectionStart();
+	pos_type selEnd = cursor.selectionEnd();
 	cursor.setPosition(selStart);
 	if (!cursor.atBlockStart()) {
 		cursor.movePosition(QTextCursor::StartOfBlock);
@@ -171,7 +171,7 @@ void CompletingEdit::unPrefixLines(const QString &prefix)
 		QString		str = cursor.selectedText();
 		if (str == prefix) {
 			cursor.removeSelectedText();
-			selEnd -= prefix.length();
+			selEnd -= static_cast<pos_type>(prefix.length());
 		}
 		else
 			cursor.movePosition(QTextCursor::PreviousCharacter);
@@ -466,8 +466,8 @@ bool CompletingEdit::selectWord(QTextCursor& cursor)
 
 	QString::size_type start{0}, end{0};
 	bool result = Tw::Document::TeXDocument::findNextWord(text, cursor.selectionStart() - block.position(), start, end);
-	cursor.setPosition(block.position() + start);
-	cursor.setPosition(block.position() + end, QTextCursor::KeepAnchor);
+	cursor.setPosition(block.position() + static_cast<pos_type>(start));
+	cursor.setPosition(block.position() + static_cast<pos_type>(end), QTextCursor::KeepAnchor);
 
 	return result;
 }
@@ -506,14 +506,14 @@ QTextCursor CompletingEdit::wordSelectionForPos(const QPoint& mousePos)
 		QChar curChr = plainText[cursorPos];
 		QChar c;
 		if (!(c = TWUtils::closerMatching(curChr)).isNull()) {
-			auto balancePos = TWUtils::balanceDelim(plainText, cursorPos + 1, c, 1);
+			auto balancePos = static_cast<pos_type>(TWUtils::balanceDelim(plainText, cursorPos + 1, c, 1));
 			if (balancePos < 0)
 				QApplication::beep();
 			else
 				cursor.setPosition(balancePos + 1, QTextCursor::KeepAnchor);
 		}
 		else if (!(c = TWUtils::openerMatching(curChr)).isNull()) {
-			auto balancePos = TWUtils::balanceDelim(plainText, cursorPos - 1, c, -1);
+			auto balancePos = static_cast<pos_type>(TWUtils::balanceDelim(plainText, cursorPos - 1, c, -1));
 			if (balancePos < 0)
 				QApplication::beep();
 			else {
@@ -658,7 +658,7 @@ void CompletingEdit::handleBackspace(QKeyEvent *e)
 		curs.beginEditBlock();
 		// note that prefixLength will get reset on the first deletion,
 		// so it is important that the loop counts down rather than up!
-		for (int i = prefixLength; i > 0; --i)
+		for (auto i = prefixLength; i > 0; --i)
 			curs.deletePreviousChar();
 		curs.endEditBlock();
 	}
@@ -673,8 +673,8 @@ void CompletingEdit::handleBackspace(QKeyEvent *e)
 
 void CompletingEdit::handleOtherKey(QKeyEvent *e)
 {
-	int pos = textCursor().selectionStart(); // remember cursor before the keystroke
-	int end = textCursor().selectionEnd();
+	pos_type pos = textCursor().selectionStart(); // remember cursor before the keystroke
+	pos_type end = textCursor().selectionEnd();
 	QTextEdit::keyPressEvent(e);
 	QTextCursor cursor = textCursor();
 	bool arrowKey = false;
@@ -698,12 +698,12 @@ void CompletingEdit::handleOtherKey(QKeyEvent *e)
 				if (cursor.selectionStart() == pos - 1) // we moved backward, set pos to look at the char we just passed over
 					--pos;
 				const QString text = document()->toPlainText();
-				int match = -2;
+				pos_type match = -2;
 				QChar c;
 				if (pos > 0 && pos < text.length() && !(c = TWUtils::openerMatching(text[pos])).isNull())
-					match = TWUtils::balanceDelim(text, pos - 1, c, -1);
+					match = static_cast<pos_type>(TWUtils::balanceDelim(text, pos - 1, c, -1));
 				else if (pos < text.length() - 1 && !(c = TWUtils::closerMatching(text[pos])).isNull())
-					match = TWUtils::balanceDelim(text, pos + 1, c, 1);
+					match = static_cast<pos_type>(TWUtils::balanceDelim(text, pos + 1, c, 1));
 				if (match >= 0) {
 					QList<ExtraSelection> selList = extraSelections();
 					ExtraSelection	sel;
@@ -831,8 +831,8 @@ void CompletingEdit::smartenQuotes()
 	const QString& text = document()->toPlainText();
 
 	QTextCursor curs = textCursor();
-	int selStart = curs.selectionStart();
-	int selEnd = curs.selectionEnd();
+	pos_type selStart = curs.selectionStart();
+	pos_type selEnd = curs.selectionEnd();
 	bool changed = false;
 	for (int offset = selEnd; offset > selStart; ) {
 		--offset;
@@ -850,7 +850,7 @@ void CompletingEdit::smartenQuotes()
 		const QString& replacement((offset == 0 || text[offset - 1].isSpace()) ?
 								   iter.value().first : iter.value().second);
 		curs.insertText(replacement);
-		selEnd += replacement.length() - 1;
+		selEnd += static_cast<pos_type>(replacement.length()) - 1;
 	}
 	if (changed) {
 		curs.endEditBlock();
@@ -983,7 +983,7 @@ void CompletingEdit::handleTab(QKeyEvent * e)
 	}
 }
 
-void CompletingEdit::showCompletion(const QString& completion, int insOffset)
+void CompletingEdit::showCompletion(const QString& completion, QString::size_type insOffset)
 {
 	disconnect(this, &CompletingEdit::cursorPositionChanged, this, &CompletingEdit::cursorPositionChangedSlot);
 
@@ -993,15 +993,15 @@ void CompletingEdit::showCompletion(const QString& completion, int insOffset)
 	QTextCursor tc = cmpCursor;
 	if (tc.isNull()) {
 		tc = textCursor();
-		tc.movePosition(QTextCursor::PreviousCharacter, QTextCursor::KeepAnchor, c->completionPrefix().length());
+		tc.movePosition(QTextCursor::PreviousCharacter, QTextCursor::KeepAnchor, static_cast<pos_type>(c->completionPrefix().length()));
 	}
 
 	tc.insertText(completion);
 	cmpCursor = tc;
-	cmpCursor.movePosition(QTextCursor::PreviousCharacter, QTextCursor::KeepAnchor, completion.length());
+	cmpCursor.movePosition(QTextCursor::PreviousCharacter, QTextCursor::KeepAnchor, static_cast<pos_type>(completion.length()));
 
 	if (insOffset != -1)
-		tc.movePosition(QTextCursor::PreviousCharacter, QTextCursor::MoveAnchor, completion.length() - insOffset);
+		tc.movePosition(QTextCursor::PreviousCharacter, QTextCursor::MoveAnchor, static_cast<pos_type>(completion.length() - insOffset));
 	setTextCursor(tc);
 
 	currentCompletionRange = cmpCursor;
@@ -1041,7 +1041,7 @@ void CompletingEdit::showCurrentCompletion()
 
 	QString completion = model->item(items[itemIndex]->row(), 1)->text();
 
-	int insOffset = completion.indexOf(QLatin1String("#INS#"));
+	auto insOffset = completion.indexOf(QLatin1String("#INS#"));
 	if (insOffset != -1)
 		completion.replace(QLatin1String("#INS#"), QLatin1String(""));
 
@@ -1239,11 +1239,11 @@ void CompletingEdit::dropEvent(QDropEvent *event)
 #if QT_VERSION < QT_VERSION_CHECK(6, 0, 0)
 	QTextCursor dropCursor = cursorForPosition(event->pos());
 #else
-  QTextCursor dropCursor = cursorForPosition(event->position().toPoint());
+	QTextCursor dropCursor = cursorForPosition(event->position().toPoint());
 #endif
 	if (!dropCursor.isNull()) {
 		droppedOffset = dropCursor.position();
-		droppedLength = event->mimeData()->text().length();
+		droppedLength = static_cast<pos_type>(event->mimeData()->text().length());
 	}
 	else
 		droppedOffset = -1;
diff --git a/src/CompletingEdit.h b/src/CompletingEdit.h
index c8ad640c..13404258 100644
--- a/src/CompletingEdit.h
+++ b/src/CompletingEdit.h
@@ -40,6 +40,7 @@ class QTextCodec;
 class CompletingEdit : public QTextEdit, private Ui::CompletingEdit
 {
 	Q_OBJECT
+	using pos_type = decltype(QTextCursor().position());
 
 public:
 	CompletingEdit(QWidget *parent = nullptr);
@@ -128,7 +129,7 @@ private slots:
 
 	void setCompleter(QCompleter *c);
 
-	void showCompletion(const QString& completion, int insOffset = -1);
+	void showCompletion(const QString& completion, QString::size_type insOffset = -1);
 	void showCurrentCompletion();
 
 	void loadCompletionsFromFile(QStandardItemModel *model, const QString& filename);
@@ -158,7 +159,7 @@ private slots:
 
 	QTextCursor dragStartCursor;
 
-	int droppedOffset{-1}, droppedLength{0};
+	pos_type droppedOffset{-1}, droppedLength{0};
 
 	QBasicTimer clickTimer;
 	QPoint clickPos;
@@ -192,7 +193,7 @@ private slots:
 	QTextCursor cmpCursor;
 
 	QString prevCompletion; // used with multiple entries for the same key (e.g., "--")
-	int itemIndex{0};
+	QList<void*>::size_type itemIndex{0};
 	int prevRow{-1};
 
 	QTextCursor currentWord;
diff --git a/src/FindDialog.cpp b/src/FindDialog.cpp
index ce7017f4..e27f3f3c 100644
--- a/src/FindDialog.cpp
+++ b/src/FindDialog.cpp
@@ -465,7 +465,7 @@ void SearchResults::presentResults(const QString& searchText,
 	SearchResults* resultsWindow = new SearchResults(parent);
 	resultsWindow->setWindowTitle(tr("Search Results - %1 (%2 found)").arg(searchText).arg(results.count()));
 
-	resultsWindow->table->setRowCount(results.count());
+	resultsWindow->table->setRowCount(static_cast<decltype(resultsWindow->table->rowCount())>(results.count()));
 	int i = 0;
 	foreach (const SearchResult &result, results) {
 		QTableWidgetItem * item = new QTableWidgetItem();
diff --git a/src/PDFDocumentWindow.cpp b/src/PDFDocumentWindow.cpp
index 9e912ea8..32517789 100644
--- a/src/PDFDocumentWindow.cpp
+++ b/src/PDFDocumentWindow.cpp
@@ -554,7 +554,7 @@ void PDFDocumentWindow::loadSyncData()
 		statusBar()->showMessage(tr("SyncTeX: \"%1\"").arg(_synchronizer->syncTeXFilename()), kStatusMessageDuration);
 }
 
-void PDFDocumentWindow::syncClick(int pageIndex, const QPointF& pos)
+void PDFDocumentWindow::syncClick(size_type pageIndex, const QPointF& pos)
 {
 	Tw::Settings settings;
 	TWSynchronizer::Resolution res{TWSynchronizer::kDefault_Resolution_ToPDF};
@@ -573,7 +573,7 @@ void PDFDocumentWindow::syncClick(int pageIndex, const QPointF& pos)
 	syncRange(pageIndex, pos, pos, res);
 }
 
-void PDFDocumentWindow::syncRange(const int pageIndex, const QPointF & start, const QPointF & end, const TWSynchronizer::Resolution resolution)
+void PDFDocumentWindow::syncRange(const size_type pageIndex, const QPointF & start, const QPointF & end, const TWSynchronizer::Resolution resolution)
 {
 	if (!_synchronizer)
 		return;
@@ -628,10 +628,11 @@ void PDFDocumentWindow::syncRange(const int pageIndex, const QPointF & start, co
 	// Get a text cursor in the correct position for "start" (if no valid column
 	// was found, place it at the beginning of the correct line)
 	QTextCursor curStart = texDoc->textCursor();
+	using pos_type = decltype(curStart.position());
 	curStart.setPosition(0);
 	curStart.movePosition(QTextCursor::NextBlock, QTextCursor::MoveAnchor, destStart.line - 1);
 	if (destStart.col >= 0)
-		curStart.movePosition(QTextCursor::NextCharacter, QTextCursor::MoveAnchor, destStart.col);
+		curStart.movePosition(QTextCursor::NextCharacter, QTextCursor::MoveAnchor, static_cast<pos_type>(destStart.col));
 
 	// Get a text cursor in the correct position for "end" (if no valid column
 	// was found, place it at the end of the correct line)
@@ -640,7 +641,7 @@ void PDFDocumentWindow::syncRange(const int pageIndex, const QPointF & start, co
 		curEnd.setPosition(0);
 		curEnd.movePosition(QTextCursor::NextBlock, QTextCursor::MoveAnchor, destStart.line - 1);
 		if (destEnd.col >= 0)
-			curEnd.movePosition(QTextCursor::NextCharacter, QTextCursor::MoveAnchor, destEnd.col + qMax(1, destEnd.len));
+			curEnd.movePosition(QTextCursor::NextCharacter, QTextCursor::MoveAnchor, static_cast<pos_type>(destEnd.col + qMax(1, destEnd.len)));
 		else
 			curEnd.movePosition(QTextCursor::EndOfBlock);
 	}
@@ -780,7 +781,7 @@ PDFDocumentWindow *PDFDocumentWindow::findDocument(const QString &fileName)
 	return nullptr;
 }
 
-void PDFDocumentWindow::showPage(int page)
+void PDFDocumentWindow::showPage(size_type page)
 {
 	pageLabel->setText(tr("page %1 of %2").arg(page).arg(pdfWidget->lastPage()));
 }
@@ -823,7 +824,7 @@ void PDFDocumentWindow::changedDocument(const QWeakPointer<QtPDF::Backend::Docum
 	enablePageActions(pdfWidget->currentPage());
 }
 
-void PDFDocumentWindow::enablePageActions(int pageIndex)
+void PDFDocumentWindow::enablePageActions(size_type pageIndex)
 {
 //#if !defined(Q_OS_DARWIN)
 // On Mac OS X, disabling these leads to a crash if we hit the end of document while auto-repeating a key
@@ -1035,7 +1036,7 @@ void PDFDocumentWindow::doFindAgain(bool newSearch /* = false */)
 	widget()->search(searchText, searchFlags);
 }
 
-void PDFDocumentWindow::searchResultHighlighted(const int pageNum, const QList<QPolygonF> & pdfRegion)
+void PDFDocumentWindow::searchResultHighlighted(const size_type pageNum, const QList<QPolygonF> & pdfRegion)
 {
 	Tw::Settings settings;
 
@@ -1235,8 +1236,8 @@ void PDFDocumentWindow::doPageDialog()
 	bool ok{false};
 
 	int pageNo = QInputDialog::getInt(this, tr("Go to Page"),
-									tr("Page number:"), pdfWidget->currentPage() + 1,
-                  1, pdfWidget->lastPage(), 1, &ok);
+									tr("Page number:"), static_cast<int>(pdfWidget->currentPage() + 1),
+				  1, static_cast<int>(pdfWidget->lastPage()), 1, &ok);
 	if (ok)
 		pdfWidget->goToPage(pageNo - 1);
 }
diff --git a/src/PDFDocumentWindow.h b/src/PDFDocumentWindow.h
index 255f8090..5825ae52 100644
--- a/src/PDFDocumentWindow.h
+++ b/src/PDFDocumentWindow.h
@@ -63,6 +63,8 @@ class PDFDocumentWindow : public TWScriptableWindow, private Ui::PDFDocumentWind
     Q_PROPERTY(QString fileName READ fileName)
 
 public:
+	using size_type = QtPDF::Backend::Document::size_type;
+
 	PDFDocumentWindow(const QString &fileName, TeXDocumentWindow *sourceDoc = nullptr);
 	~PDFDocumentWindow() override;
 
@@ -76,7 +78,7 @@ class PDFDocumentWindow : public TWScriptableWindow, private Ui::PDFDocumentWind
 		{ return curFile; }
 
 	void showScale(qreal scale);
-	void showPage(int page);
+	void showPage(size_type page);
 	void setResolution(const double res);
 	void resetMagnifier();
 	void enableTypesetAction(bool enabled);
@@ -120,9 +122,9 @@ private slots:
 	void changedDocument(const QWeakPointer<QtPDF::Backend::Document> & newDoc);
 	void updateRecentFileActions();
 	void updateWindowMenu();
-	void enablePageActions(int);
-	void syncClick(int page, const QPointF& pos);
-	void syncRange(const int pageIndex, const QPointF & start, const QPointF & end, const TWSynchronizer::Resolution resolution);
+	void enablePageActions(PDFDocumentWindow::size_type);
+	void syncClick(PDFDocumentWindow::size_type page, const QPointF& pos);
+	void syncRange(const PDFDocumentWindow::size_type pageIndex, const QPointF & start, const QPointF & end, const TWSynchronizer::Resolution resolution);
 	void invalidateSyncHighlight();
 	void scaleLabelClick(QMouseEvent * event) { showScaleContextMenu(event->pos()); }
 	void showScaleContextMenu(const QPoint pos);
@@ -132,7 +134,7 @@ private slots:
 	void doPageDialog();
 	void doScaleDialog();
 	void jumpToSource();
-	void searchResultHighlighted(const int pageNum, const QList<QPolygonF> & pdfRegion);
+	void searchResultHighlighted(const PDFDocumentWindow::size_type pageNum, const QList<QPolygonF> & pdfRegion);
 	void setDefaultScale();
 	void maybeOpenUrl(const QUrl & url);
 	void maybeOpenPdf(const QString & filename, const QtPDF::PDFDestination & destination, const bool newWindow);
diff --git a/src/PrefsDialog.cpp b/src/PrefsDialog.cpp
index 8463ccd2..73007d2a 100644
--- a/src/PrefsDialog.cpp
+++ b/src/PrefsDialog.cpp
@@ -465,6 +465,7 @@ static bool dictPairLessThan(const DictPair& d1, const DictPair& d2)
 QDialog::DialogCode PrefsDialog::doPrefsDialog(QWidget *parent)
 {
 	PrefsDialog dlg(nullptr);
+	using index_type = decltype(QComboBox().currentIndex());
 
 	QStringList nameList;
 	foreach (QTextCodec *codec, *TWUtils::findCodecs())
@@ -571,15 +572,15 @@ QDialog::DialogCode PrefsDialog::doPrefsDialog(QWidget *parent)
 	dlg.localePopup->setCurrentIndex(oldLocaleIndex);
 
 	// Editor
-	dlg.syntaxColoring->setCurrentIndex(settings.contains(QString::fromLatin1("syntaxColoring"))
+	dlg.syntaxColoring->setCurrentIndex(static_cast<index_type>(settings.contains(QString::fromLatin1("syntaxColoring"))
 	                        ? 1 + syntaxOptions.indexOf(settings.value(QString::fromLatin1("syntaxColoring")).toString())
-							: 1 + kDefault_SyntaxColoring);
-	dlg.autoIndent->setCurrentIndex(settings.contains(QString::fromLatin1("autoIndent"))
+							: 1 + kDefault_SyntaxColoring));
+	dlg.autoIndent->setCurrentIndex(static_cast<index_type>(settings.contains(QString::fromLatin1("autoIndent"))
 	                        ? 1 + indentModes.indexOf(settings.value(QString::fromLatin1("autoIndent")).toString())
-							: 1 + kDefault_IndentMode);
-	dlg.smartQuotes->setCurrentIndex(settings.contains(QString::fromLatin1("smartQuotes"))
+							: 1 + kDefault_IndentMode));
+	dlg.smartQuotes->setCurrentIndex(static_cast<index_type>(settings.contains(QString::fromLatin1("smartQuotes"))
 	                        ? 1 + quotesModes.indexOf(settings.value(QString::fromLatin1("smartQuotes")).toString())
-							: 1 + kDefault_QuotesMode);
+							: 1 + kDefault_QuotesMode));
 	dlg.lineNumbers->setChecked(settings.value(QString::fromLatin1("lineNumbers"), kDefault_LineNumbers).toBool());
 	dlg.wrapLines->setChecked(settings.value(QString::fromLatin1("wrapLines"), kDefault_WrapLines).toBool());
 	dlg.tabWidth->setValue(settings.value(QString::fromLatin1("tabWidth"), kDefault_TabWidth).toInt());
@@ -590,9 +591,9 @@ QDialog::DialogCode PrefsDialog::doPrefsDialog(QWidget *parent)
 	QFont font;
 	if (!fontString.isEmpty())
 		font.fromString(fontString);
-	dlg.editorFont->setCurrentIndex(fdb.families().indexOf(font.family()));
+	dlg.editorFont->setCurrentIndex(static_cast<index_type>(fdb.families().indexOf(font.family())));
 	dlg.fontSize->setValue(font.pointSize());
-	dlg.encoding->setCurrentIndex(nameList.indexOf(QString::fromUtf8(TWApp::instance()->getDefaultCodec()->name().constData())));
+	dlg.encoding->setCurrentIndex(static_cast<index_type>(nameList.indexOf(QString::fromUtf8(TWApp::instance()->getDefaultCodec()->name().constData()))));
 	dlg.highlightCurrentLine->setChecked(settings.value(QString::fromLatin1("highlightCurrentLine"), kDefault_HighlightCurrentLine).toBool());
 	dlg.cursorWidth->setValue(settings.value(QStringLiteral("cursorWidth"), kDefault_CursorWidth).toInt());
 	dlg.autocompleteEnabled->setChecked(settings.value(QString::fromLatin1("autocompleteEnabled"), kDefault_AutocompleteEnabled).toBool());
diff --git a/src/TWSynchronizer.cpp b/src/TWSynchronizer.cpp
index 81a55b3e..a1adfe3f 100644
--- a/src/TWSynchronizer.cpp
+++ b/src/TWSynchronizer.cpp
@@ -25,6 +25,11 @@
 #include <QFileInfo>
 #include <QTextBlock>
 
+namespace {
+  using page_type = decltype(SyncTeX::synctex_node_page(nullptr));
+  using column_type = decltype(SyncTeX::synctex_node_column(nullptr));
+}
+
 // TODO for fine-grained search:
 // - Specially handle \commands (and possibly other TeX codes)
 // - Allow to increase the context to neighboring lines (in case lines were
@@ -92,7 +97,7 @@ TWSynchronizer::PDFSyncPoint TWSyncTeXSynchronizer::syncFromTeX(const TWSynchron
 
   retVal.filename = pdfFilename();
 
-  if (SyncTeX::synctex_display_query(_scanner, name.toLocal8Bit().data(), src.line, src.col, -1) > 0) {
+  if (SyncTeX::synctex_display_query(_scanner, name.toLocal8Bit().data(), src.line, static_cast<column_type>(src.col), -1) > 0) {
 	while ((node = SyncTeX::synctex_scanner_next_result(_scanner))) {
       if (retVal.page < 0)
         retVal.page = SyncTeX::synctex_node_page(node);
@@ -125,7 +130,7 @@ TWSynchronizer::TeXSyncPoint TWSyncTeXSynchronizer::syncFromPDF(const TWSynchron
   if (src.rects.length() != 1)
     return retVal;
 
-  if (SyncTeX::synctex_edit_query(_scanner, src.page, static_cast<float>(src.rects[0].left()), static_cast<float>(src.rects[0].top())) > 0) {
+  if (SyncTeX::synctex_edit_query(_scanner, static_cast<page_type>(src.page), static_cast<float>(src.rects[0].left()), static_cast<float>(src.rects[0].top())) > 0) {
     SyncTeX::synctex_node_p node{nullptr};
     while ((node = SyncTeX::synctex_scanner_next_result(_scanner))) {
       retVal.filename = QString::fromLocal8Bit(SyncTeX::synctex_scanner_get_name(_scanner, SyncTeX::synctex_node_tag(node)));
@@ -244,7 +249,7 @@ void TWSyncTeXSynchronizer::_syncFromPDFFine(const TWSynchronizer::PDFSyncPoint
   // than one PDF rect for multiline paragraphs).
   // Note: this still does not help for paragraphs broken across pages
   QList<QPolygonF> selection;
-  if (SyncTeX::synctex_display_query(_scanner, dest.filename.toLocal8Bit().data(), dest.line, -1, src.page) > 0) {
+  if (SyncTeX::synctex_display_query(_scanner, dest.filename.toLocal8Bit().data(), dest.line, -1, static_cast<page_type>(src.page)) > 0) {
     SyncTeX::synctex_node_p node{nullptr};
 	while ((node = SyncTeX::synctex_scanner_next_result(_scanner))) {
       if (SyncTeX::synctex_node_page(node) != src.page)
diff --git a/src/TWSynchronizer.h b/src/TWSynchronizer.h
index 6381e868..9b53a6b4 100644
--- a/src/TWSynchronizer.h
+++ b/src/TWSynchronizer.h
@@ -54,7 +54,7 @@ class TWSynchronizer
   };
   struct PDFSyncPoint {
     QString filename;
-    int page;
+    QtPDF::Backend::Document::size_type page;
     QList<QRectF> rects;
 
     bool operator==(const PDFSyncPoint & o) const {
diff --git a/src/TeXDocumentWindow.cpp b/src/TeXDocumentWindow.cpp
index 9d4c2532..3cd3d121 100644
--- a/src/TeXDocumentWindow.cpp
+++ b/src/TeXDocumentWindow.cpp
@@ -1946,15 +1946,16 @@ void TeXDocumentWindow::balanceDelimiters()
 {
 	const QString text = textEdit->text();
 	QTextCursor cursor = textEdit->textCursor();
-	int openPos = TWUtils::findOpeningDelim(text, cursor.selectionStart());
+	using pos_type = decltype(cursor.position());
+	auto openPos = TWUtils::findOpeningDelim(text, cursor.selectionStart());
 	if (openPos >= 0 && openPos < text.length() - 1) {
 		do {
-			int closePos = TWUtils::balanceDelim(text, openPos + 1, TWUtils::closerMatching(text[openPos]), 1);
+			auto closePos = TWUtils::balanceDelim(text, openPos + 1, TWUtils::closerMatching(text[openPos]), 1);
 			if (closePos < 0)
 				break;
 			if (closePos >= cursor.selectionEnd()) {
-				cursor.setPosition(openPos);
-				cursor.setPosition(closePos + 1, QTextCursor::KeepAnchor);
+				cursor.setPosition(static_cast<pos_type>(openPos));
+				cursor.setPosition(static_cast<pos_type>(closePos + 1), QTextCursor::KeepAnchor);
 				textEdit->setTextCursor(cursor);
 				return;
 			}
@@ -2026,6 +2027,7 @@ void TeXDocumentWindow::doInsertCitationsDialog()
 	pattern += QLatin1String(")\\*?\\s*(\\[[^\\]]*\\])?\\s*\\{([^}]*)\\}");
 
 	QTextCursor curs(textDoc());
+	using pos_type = decltype(curs.position());
 	constexpr int PeekLength = 1024;
 
 	int peekFront = qMin(PeekLength, curs.position());
@@ -2041,7 +2043,8 @@ void TeXDocumentWindow::doInsertCitationsDialog()
 	QRegularExpressionMatch mCmd;
 
 #if QT_VERSION >= 0x050500
-	peekStr.lastIndexOf(reCmd, peekFront, &mCmd);
+	auto pos = peekStr.lastIndexOf(reCmd, peekFront, &mCmd);
+	Q_UNUSED(pos)
 #else
 	int pos = peekStr.lastIndexOf(reCmd, peekFront);
 	if (pos >= 0)
@@ -2070,9 +2073,9 @@ void TeXDocumentWindow::doInsertCitationsDialog()
 			// captures pos() returns -1 according to the documentation; in that
 			// case, use the fact that cap(0) is not empty and we know that the
 			// argument is followed by "}"
-			curs.movePosition(QTextCursor::NextCharacter, QTextCursor::MoveAnchor, (mCmd.capturedStart(3) >= 0 ? mCmd.capturedStart(3) : mCmd.capturedEnd(0) - 1));
+			curs.movePosition(QTextCursor::NextCharacter, QTextCursor::MoveAnchor, static_cast<pos_type>(mCmd.capturedStart(3) >= 0 ? mCmd.capturedStart(3) : mCmd.capturedEnd(0) - 1));
 			// select the cite argument (until just before '}')
-			curs.movePosition(QTextCursor::NextCharacter, QTextCursor::KeepAnchor, mCmd.capturedLength(3));
+			curs.movePosition(QTextCursor::NextCharacter, QTextCursor::KeepAnchor, static_cast<pos_type>(mCmd.capturedLength(3)));
 			// replace the text
 			curs.insertText(dlg.getSelectedKeys().join(QLatin1String(",")));
 			curs.endEditBlock();
@@ -2347,7 +2350,7 @@ void TeXDocumentWindow::doFindAgain(bool fromDialog)
 		}
 		else {
 			SearchResults::presentResults(searchText, results, this, singleFile);
-			statusBar()->showMessage(tr("Found %n occurrence(s)", "", results.count()), kStatusMessageDuration);
+			statusBar()->showMessage(tr("Found %n occurrence(s)", "", static_cast<int>(results.count())), kStatusMessageDuration);
 		}
 	}
 	else {
@@ -2418,7 +2421,7 @@ void TeXDocumentWindow::doReplace(ReplaceDialog::DialogCode mode)
 	QString	replacement = settings.value(QString::fromLatin1("replaceText")).toString();
 	if (regex) {
 		QRegularExpression escapedChar(QStringLiteral("\\\\([nt\\\\]|x([0-9A-Fa-f]{4}))"));
-		int index = -1;
+		QString::size_type index = -1;
 		QRegularExpressionMatch escapeMatch;
 		while ((escapeMatch = escapedChar.match(replacement, index + 1)).hasMatch()) {
 			index = escapeMatch.capturedStart();
@@ -2516,7 +2519,7 @@ void TeXDocumentWindow::doReplace(ReplaceDialog::DialogCode mode)
 			foreach (TeXDocumentWindow* doc, docList)
 				replacements += doc->doReplaceAll(searchText, regex, replacement, flags);
 			QString numOccurrences = tr("%n occurrence(s)", "", replacements);
-			QString numDocuments = tr("%n documents", "", docList.count());
+			QString numDocuments = tr("%n documents", "", static_cast<int>(docList.count()));
 			QString message = tr("Replaced %1 in %2").arg(numOccurrences, numDocuments);
 			statusBar()->showMessage(message, kStatusMessageDuration);
 		}
@@ -2540,6 +2543,7 @@ int TeXDocumentWindow::doReplaceAll(const QString& searchText, QRegularExpressio
 								QTextDocument::FindFlags flags, int rangeStart, int rangeEnd)
 {
 	QTextCursor searchRange = textCursor();
+	using pos_type = decltype(searchRange.position());
 	searchRange.select(QTextCursor::Document);
 	if (rangeStart < 0)
 		rangeStart = searchRange.selectionStart();
@@ -2560,12 +2564,12 @@ int TeXDocumentWindow::doReplaceAll(const QString& searchText, QRegularExpressio
 			first = false;
 		}
 		QString target;
-		int oldLen = curs.selectionEnd() - curs.selectionStart();
+		pos_type oldLen = curs.selectionEnd() - curs.selectionStart();
 		if (regex)
 			target = textEdit->text().mid(curs.selectionStart(), oldLen).replace(*regex, replacement);
 		else
 			target = replacement;
-		int newLen = target.length();
+		pos_type newLen = static_cast<pos_type>(target.length());
 		if ((flags & QTextDocument::FindBackward) != 0)
 			rangeEnd = curs.selectionStart();
 		else {
@@ -2587,6 +2591,7 @@ int TeXDocumentWindow::doReplaceAll(const QString& searchText, QRegularExpressio
 QTextCursor TeXDocumentWindow::doSearch(const QString& searchText, const QRegularExpression * regex, QTextDocument::FindFlags flags, int s, int e)
 {
 	QTextCursor curs;
+	using pos_type = decltype(curs.position());
 	QTextDocument * theDoc = textEdit->document();
 	const QString& docText = textEdit->text();
 
@@ -2613,8 +2618,8 @@ QTextCursor TeXDocumentWindow::doSearch(const QString& searchText, const QRegula
 			}
 			if (offset >= s) {
 				curs = QTextCursor(textEdit->document());
-				curs.setPosition(m.capturedStart());
-				curs.setPosition(m.capturedEnd(), QTextCursor::KeepAnchor);
+				curs.setPosition(static_cast<pos_type>(m.capturedStart()));
+				curs.setPosition(static_cast<pos_type>(m.capturedEnd()), QTextCursor::KeepAnchor);
 			}
 		}
 		else {
@@ -2634,8 +2639,8 @@ QTextCursor TeXDocumentWindow::doSearch(const QString& searchText, const QRegula
 			QRegularExpressionMatch m = regex->match(docText, s);
 			if (m.hasMatch()) {
 				curs = QTextCursor(theDoc);
-				curs.setPosition(m.capturedStart());
-				curs.setPosition(m.capturedEnd(), QTextCursor::KeepAnchor);
+				curs.setPosition(static_cast<pos_type>(m.capturedStart()));
+				curs.setPosition(static_cast<pos_type>(m.capturedEnd()), QTextCursor::KeepAnchor);
 			}
 		}
 		else {
@@ -3070,7 +3075,8 @@ void TeXDocumentWindow::acceptInputLine()
 	if (process) {
 		QString	str = inputLine->text();
 		QTextCursor	curs(textEdit_console->document());
-		curs.setPosition(textEdit_console->toPlainText().length());
+		using pos_type = decltype(curs.position());
+		curs.setPosition(static_cast<pos_type>(textEdit_console->toPlainText().length()));
 		textEdit_console->setTextCursor(curs);
 		QTextCharFormat	consoleFormat = textEdit_console->currentCharFormat();
 		QTextCharFormat inputFormat(consoleFormat);
@@ -3078,7 +3084,7 @@ void TeXDocumentWindow::acceptInputLine()
 		str.append(QChar::fromLatin1('\n'));
 		textEdit_console->insertPlainText(str);
 		curs.movePosition(QTextCursor::PreviousCharacter);
-		curs.movePosition(QTextCursor::PreviousCharacter, QTextCursor::KeepAnchor, str.length() - 1);
+		curs.movePosition(QTextCursor::PreviousCharacter, QTextCursor::KeepAnchor, static_cast<pos_type>(str.length() - 1));
 		curs.setCharFormat(inputFormat);
 		process->write(str.toUtf8());
 		inputLine->clear();
diff --git a/src/TeXHighlighter.cpp b/src/TeXHighlighter.cpp
index 8160c891..59514abf 100644
--- a/src/TeXHighlighter.cpp
+++ b/src/TeXHighlighter.cpp
@@ -124,8 +124,9 @@ void TeXHighlighter::highlightBlock(const QString &text)
 				}
 				if (firstPatt && firstMatch.hasMatch() && (len = firstMatch.capturedLength()) > 0) {
 					QTextCursor	cursor(document());
-					cursor.setPosition(currentBlock().position() + firstIndex);
-					cursor.setPosition(currentBlock().position() + firstIndex + len, QTextCursor::KeepAnchor);
+					using pos_type = decltype(cursor.position());
+					cursor.setPosition(currentBlock().position() + static_cast<pos_type>(firstIndex));
+					cursor.setPosition(currentBlock().position() + static_cast<pos_type>(firstIndex + len), QTextCursor::KeepAnchor);
 					QString tagText = firstMatch.captured(1);
 					if (tagText.isEmpty())
 						tagText = firstMatch.captured(0);
